# run_dev.py
import asyncio
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# === –≤–ª–∞—Å–Ω—ñ –º–æ–¥—É–ª—ñ ===
from core.db import init_db
from market.symbols import refresh_futures
from bot.handlers.pairs_parser import router as pairs_router
from core.config import EXCHANGES   # –ø—Ä–æ—Å—Ç–æ —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ —ñ–º–ø–æ—Ä—Ç –ø—Ä–∞—Ü—é—î

# === TELEGRAM TOKEN ===
# –∑—Ä—É—á–Ω—ñ—à–µ —Ç—Ä–∏–º–∞—Ç–∏ –≤ –∑–º—ñ–Ω–Ω—ñ–π –æ—Ç–æ—á–µ–Ω–Ω—è (–∞–±–æ .env)
from dotenv import load_dotenv
load_dotenv()  

import os
TG_TOKEN = os.getenv("TG_TOKEN")
if TG_TOKEN is None:
    raise RuntimeError("–ó–∞–¥–∞–π—Ç–µ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è TG_TOKEN –∑—ñ —Å–≤–æ—ó–º Bot API —Ç–æ–∫–µ–Ω–æ–º")

# === –õ–æ–≥–∏ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
)

async def main() -> None:
    # 1) –±–∞–∑–∞
    await init_db()

    # 2) –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ñ'—é—á–µ—Ä—Å-—Å–∏–º–≤–æ–ª—ñ–≤
    scheduler = AsyncIOScheduler(timezone="Europe/Kyiv")
    scheduler.add_job(refresh_futures, "interval", hours=1, next_run_time=None)
    scheduler.start()

    # 3) Telegram-–±–æ—Ç
    bot = Bot(TG_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.include_router(pairs_router)

    logging.info("üöÄ Bot started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë Bot stopped")
